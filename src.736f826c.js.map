{"version":3,"sources":["index.js"],"names":["Timer","selector","targetDate","selectorId","document","querySelector","daysInfo","hoursInfo","minutesInfo","secondsInfo","daysText","hoursText","minutesText","secondsText","start","intervalId","setInterval","currentTime","Date","now","deltaTime","getTime","time","getTimeComponents","updateClockDisplay","updateTextDisplay","days","pad","Math","floor","hours","mins","secs","value","String","padStart","textContent","timer"],"mappings":";AAwDA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxDMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BA,KAAAA,WAAaA,EACbC,KAAAA,WAAaC,SAASC,cAAcJ,GACpCK,KAAAA,SAAW,KAAKH,WAAWE,cAAc,uBACzCE,KAAAA,UAAY,KAAKJ,WAAWE,cAAc,wBAC1CG,KAAAA,YAAc,KAAKL,WAAWE,cAAc,uBAC5CI,KAAAA,YAAc,KAAKN,WAAWE,cAAc,uBAE5CK,KAAAA,SAAW,KAAKP,WAAWE,cAAc,sBACzCM,KAAAA,UAAY,KAAKR,WAAWE,cAAc,uBAC1CO,KAAAA,YAAc,KAAKT,WAAWE,cAAc,sBAC5CQ,KAAAA,YAAc,KAAKV,WAAWE,cAAc,sBAE5CS,KAAAA,QA0CT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAvCE,MAAA,WAAQ,IAAA,EAAA,KACDC,KAAAA,WAAaC,YAAY,WACtBC,IAAAA,EAAcC,KAAKC,MAEnBC,EADY,EAAKlB,WAAWmB,UACJJ,EACxBK,EAAO,EAAKC,kBAAkBH,GACpC,EAAKI,mBAAmBF,GACxB,EAAKG,kBAAkBH,IACtB,OA+BP,CAAA,IAAA,oBA5BE,MAAA,SAAkBA,GAMT,MAAA,CAAEI,KALI,KAAKC,IAAIC,KAAKC,MAAMP,EAAQ,QAK1BQ,MAJD,KAAKH,IAAIC,KAAKC,MAAOP,EAAQ,MAAyB,OAI9CS,KAHT,KAAKJ,IAAIC,KAAKC,MAAOP,EAAQ,KAAoB,MAGlCU,KAFf,KAAKL,IAAIC,KAAKC,MAAOP,EAAQ,IAAc,SAwB5D,CAAA,IAAA,MAnBE,MAAA,SAAIW,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAkBrC,CAAA,IAAA,qBAfE,MAAA,SAAgD,GAA3BT,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACjC1B,KAAAA,SAAS8B,YAAiBV,GAAAA,OAAAA,GAC1BnB,KAAAA,UAAU6B,YAAiBN,GAAAA,OAAAA,GAC3BtB,KAAAA,YAAY4B,YAAiBL,GAAAA,OAAAA,GAC7BtB,KAAAA,YAAY2B,YAAiBJ,GAAAA,OAAAA,KAWtC,CAAA,IAAA,oBARE,MAAA,SAA+C,GAA3BN,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACpB,KAAKtB,SAAS0B,YAAtB,OAATV,EAA6C,MAAsC,OACjE,KAAKf,UAAUyB,YAAvB,OAAVN,EAA+C,OAAwC,QACtE,KAAKlB,YAAb,OAATmB,EAAoC,SAAgC,UACnD,KAAKlB,YAAYuB,YAAzB,OAATJ,EAAgD,SAA4C,cAIhG,EAxDMhC,GAwDAqC,EAAQ,IAAIrC,EAAM,CAAEC,SAAU,WAAYC,WAAY,IAAIgB,KAAK","file":"src.736f826c.js","sourceRoot":"..\\src","sourcesContent":["class Timer {\r\n  constructor({ selector, targetDate }) {\r\n    this.targetDate = targetDate;\r\n    this.selectorId = document.querySelector(selector);\r\n    this.daysInfo = this.selectorId.querySelector('[data-value=\"days\"]');\r\n    this.hoursInfo = this.selectorId.querySelector('[data-value=\"hours\"]');\r\n    this.minutesInfo = this.selectorId.querySelector('[data-value=\"mins\"]');\r\n    this.secondsInfo = this.selectorId.querySelector('[data-value=\"secs\"]');\r\n\r\n    this.daysText = this.selectorId.querySelector('[data-text=\"days\"]');\r\n    this.hoursText = this.selectorId.querySelector('[data-text=\"hours\"]');\r\n    this.minutesText = this.selectorId.querySelector('[data-text=\"mins\"]');\r\n    this.secondsText = this.selectorId.querySelector('[data-text=\"secs\"]');\r\n  \r\n    this.start();\r\n  }\r\n\r\n  start() {\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const finalTime = this.targetDate.getTime();\r\n      const deltaTime = finalTime - currentTime;\r\n      const time = this.getTimeComponents(deltaTime);\r\n      this.updateClockDisplay(time);\r\n      this.updateTextDisplay(time);\r\n    }, 1000);\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, 0);\r\n  }\r\n\r\n  updateClockDisplay({ days, hours, mins, secs }) {\r\n    this.daysInfo.textContent = `${days}`;\r\n    this.hoursInfo.textContent = `${hours}`;\r\n    this.minutesInfo.textContent = `${mins}`;\r\n    this.secondsInfo.textContent = `${secs}`;\r\n  }\r\n\r\n  updateTextDisplay({ days, hours, mins, secs }) {\r\n    days === '01' ? (this.daysText.textContent = 'Day') : (this.daysText.textContent = 'Days');\r\n    hours === '01' ? (this.hoursText.textContent = 'Hour') : (this.hoursText.textContent = 'Hours');\r\n    mins === '01' ? (this.minutesText = 'Minute') : (this.minutesText = 'Minutes');\r\n    secs === '01' ? (this.secondsText.textContent = 'Second') : (this.secondsText.textContent = 'Seconds');\r\n  }\r\n}\r\n\r\nconst timer = new Timer({ selector: '#timer-1', targetDate: new Date('Jul 17, 2022') });\r\n"]}